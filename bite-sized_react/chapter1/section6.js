// 함수
/* 
  자바스크립트에서는 공통으로 사용하는 유사 코드를 하나로 묶어 함수라는 이름으로 사용할 수 있다
  함수를 사용하면 유사하게 동작하는 중복 코드를 하나의 블록 단위로 묶을 수 있다.
  그리고 블록에다가 이름을 붙여 원할때마다 호출하여 사용할 수 있게 된다
*/


// 함수선언
/* 
  함수는 이름이 붙은 명령들의 모음이라고 할 수 있다
  예를 들어 직사각형의 넓이를 구해야하는 함수를 만든다고 가정하면
  높이와 너비를 곱해 넓이를 구하는 명령만을 모아 하나의 함수로 구성할 수 있다.

  기본 문법
  fuction 함수명 (매개변수){
    함수가 수행할 명령
  }

*/

function getArea(width,height){ // 함수를 선언할때 인수로 전달된 값을 저장할 변수이름을 소괄호에 작성한다
    let area = width * height;  // 인수로 전달된 값을 함수에서 사용할 수 있게 저장하는 변수를 매개변수라고 한다
    console.log(area); // 200
}

getArea(10,20)
/* 

getArea(10,20) <=함수호출
소괄호 두개의 값을 콤마로 구분해서 작성
작성된 값은 호출한 함수로 전달되는데 그 값은 인수라고 한다
*/

/* 
  인수와 매개변수

  인수는 함수를 호출하면서 넘겨주는 값이고 매개변수는 함수에서 넘겨받은 인수를 저장하는 변수
  즉 인수는 값이고 매개변수는 말 그대로 변수이다
*/



// 함수반환
/* 
  자바스크립트의 함수는 호출에 대한 답으로 값을 반환할 수 있다
  함수에서 값을 반환하려면 return문을 사용한다
*/

function getArea2(width,height){
    let area = width * height;
    return area; // 함수 내에 return문을 작성하면 return문에 있는 값을 반환합니다
                 // 함수가 돌려주는 값을 반환값이라고 합니다
}

let result = getArea(10,20); // return한 값을 변수 result에 저장됩니다 반환값은 함수호출의 결과이기도 합니다
console.log(result); // 200


// 함수에서 더 동작할 코드가 남아있더라도 return문을 만나면 함수는 종료된다



// 중첩함수
/* 
  자바스크립트는 함수 내에서 또 다른 함수를 선언 할 수 있다.
  특정 함수 내부에서 선언된 함수를 중첩함수라고 한다
*/

function greeting(){
  function greetingWithName(name){
    // 함수 greeting안에 greetingWithName함수 선언 이름을 전달받아 템플릿 리터럴를 이용해 인삿말 출력
    console.log(`hello! ${name}`);
  }
  let name = "김현아";
  greetingWithName(name)
}

// 중첩 함수를 많이 두면 가독성을 해치는 단점이 있으나 적절하게 활용하면 중복코드를 방지하는데 도움이 된다.




